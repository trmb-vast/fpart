#!/bin/bash
# mk-tree-mover: Automated mount and fpsync wrapper script to get max rsync/fpsync migration speed.
#                a script which you want to copy/rename/edit for each tree you want to move. 
#   ***    this kind of work you want to retain a "how it was run", so you can rerun later or peer-review before.
#
#                after you edit the things below.. run it, it will mount destination-directories,
#                and then it will print out the fpsync script to run (not as root) from the primary data mover host.
#                if using multiple data-movers (the -w flag) then run this script on each and as mentioned
#                it will make those VIP:/DST  mounts in /mnt/tree#   so that each host can run jobs writing
#                into those multiple mountpoints. then run from the primary data-mover which should have ssh-keys 
#                (not root ssh keys) to log into the other data-movers as your username, then it calls sudo rsync.
#                .. Or you can remove the -S flag below and just run as root.
#
# Remember: Speed Kills... be super careful with this script, and have someone double check your settings!
# Author/Maintainer:  rob@vastdata.com Fri Oct 22 23:10:28 UTC 2021
# Author and/or his employer assumes no liability for filling up storage or slowing down your filers or network.
# Version: 0.3.1

installdir=$( cd $(dirname $0) pwd) # we want to have fpsync, fpart and this script in your path.
PATH=$PATH:$installdir

##### change this to match where you have put fpsync and rsync
FPSYNC=$(which fpsync.vast)
FPSYNC=${FPSYNC:-/pkg/trmb/bin/fpsync.vast} #If not set, then set it
RSYNC=$(which rsync)
#RSYNC=/pkg/trmb/bin/rsync # you can hardcode it to the specially compiled/patched rsync (see below)

##### This is the SOURCE path on this host from which you want to replicate
SRC_PATH=/vast/201/scratch2/project_to_replicate_from


## Change these to match your site
VAST_VIP_PREFIX=172.200.2 # this is the first three octets of your vip-pool
VAST_VIP_PREFIX=172.200.3 # this is the first three octets of your vip-pool
VAST_VIPS=$(seq 1 8)      # this is a sequence of numbers of the last octet of vip-pool

### This script will call sudo to create /mnt/tree# mountpoints, one to each VAST_VIP,
### it will mount those from the following filer:$DST_FILER_EXPORT as described below
### This is the destination path as exported from the filer. 
### For safety it is best to make this an new and empty VAST view with nosquash for the data-movers
DST_FILER_EXPORT_PATH=/scratch1/project_destination    


##### Tuning jobs and fpart to fit your dataset:
##### Your data structure has a big impact on ideal partition size, and resulting performance.
## We typically break it up by qty of files per partition.. (assuming filesize is somewhat uniform)
## or we can break it up by size..  or by a couple other strategies or mix of.
##
#FPART_FLAGS="-f 1000 -n 20"    # 1k jobs per partition(or job)  and -n 20 jobs total. 20 can match the number of VAST vips you mounted. it might be faster if -n was twice the number of mounts. check ram and ldavg. 
FPART_FLAGS="-f 10000 -n 64"    # 10k jobs per partition(or job)  and -n 64 jobs total. -n should be QTY of -w hosts * num -x * CPU cores  or half that.

# Multiple data-mover config: (uncomment and set to your hosts)
#FPSYNC_W_FLAGS="-w 10.61.10.105 -w 10.61.10.107 -w 10.61.10.109" # If you have multiple data-mover hosts, and all have same paths mounted, then use em!


# these normally dont need tweaking. except know that -S will call sudo .. you can drop the -vvv if you want. 
# and you can drop the -S flag if you are already running as root.
FPSYNC_FLAGS="-vvv -S -o '-lptDogW --inplace --numeric-ids'" # run this as any user, and -S flag will call SUDO to run rsync to get root-nosquash permissions

echo "Info:  Below are the variables which you should have edited in this script:    $0"
echo "FPSYNC=$FPSYNC" 
echo "RSYNC=$RSYNC"
echo
echo "VAST_VIP_PREFIX=$VAST_VIP_PREFIX"
echo "VAST_VIPS=$(echo $VAST_VIPS | tr '\n' ' ')"
echo
echo "FPSYNC_W_FLAGS=$FPSYNC_W_FLAGS"
echo "FPSYNC_FLAGS=$FPSYNC_FLAGS"
echo
echo SRC_PATH=$SRC_PATH
echo DST_FILER_EXPORT_PATH=$DST_FILER_EXPORT_PATH
echo

#######################################################
## Make mounts above based on VIPs
#######################################################
make_themounts() {
	for i in $VAST_VIPS; do
		FPSYNC_X_FLAGS="${FPSYNC_X_FLAGS} -x /mnt/tree${i}"   # Here we build the string with multiple -x args for fpsync.vast
		df -t nfs /mnt/tree${i} >/dev/null 2>&1
		status=$?

		if [ $status -eq 0 ]; then
			echo "Info: /mnt/tree${i} already Mounted"
		else
			echo "Warning: Mounting: ${VAST_VIP_PREFIX}.$i:/scratch1 /mnt/tree${i}"
			sudo mkdir /mnt/tree${i} >/dev/null 2>&1
			sudo mount ${VAST_VIP_PREFIX}.$i:/scratch1 /mnt/tree${i}
		fi
	done
	DST_PATH=/mnt/tree${i} # This simply takes the last of the list, used as last arg for fpsync
}
echo "Info: Mounting the VAST vips"
make_themounts

# Now echo out the line we think you want to run:
echo
echo "# after review, you can run the following to launch the fpsync jobs"
echo ${FPSYNC} $FPSYNC_FLAGS $FPART_FLAGS $FPSYNC_X_FLAGS $SRC_PATH $DST_PATH

exit
#######################################################################################################
## Examples and Notes:
# It might look like this:
#/pkg/trmb/bin/fpsync.vast -vvv -S -o '-aW --inplace --numeric-ids' -f 10000 -n 64 -x /mnt/tree1 -x /mnt/tree2 -x /mnt/tree3 -x /mnt/tree4   /path/to/src /mnt/tree1

# Not in this script yet, but fpsync.vast also supports rsync:// urls with the new -x flag... looks like this.
#/pkg/trmb/bin/fpsync.rob  -vvv -S -f 15000 -n 128 -x rsync://172.200.5.97/fpsx -x rsync://172.200.5.93/fpsx -x rsync://172.200.5.95/fpsx -x rsync://172.200.5.97/fpsx -x rsync://172.200.5.61/fpsx -x rsync://172.200.5.63/fpsx -x rsync://172.200.5.103/fpsx -x rsync://172.200.5.105/fpsx -x rsync://172.200.5.107/fpsx -x rsync://172.200.5.93/fpsx    -v -o '-aW --numeric-ids --drop-cache' `pwd`/rob_test_tree rsync://172.200.5.94/fpsx

### NOTES:
##   rsync which comes with the typical distros does not have any of the special patches built in.
##   for mass copying with good performance and reliability, it is adviseable to compile rsync, and bring in these patches:
##   fadvise patch -- (rsync --drop-cache flag)  there are patches for older versions (3.1.3)  and rob has ported these to 3.2.3 ... ask him
##   sparse-blocksize -- this one helps alot if your datset has sparse files in it. set for 64k or sometimes 63k to be the sweet spot
##   directio -- this one can help alot too, but only for largefiles.. not millions of smallfiles.it hurts there.. you have to know your dataset
